// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for HttpMethod.
const (
	DELETE  HttpMethod = "DELETE"
	GET     HttpMethod = "GET"
	HEAD    HttpMethod = "HEAD"
	OPTIONS HttpMethod = "OPTIONS"
	PATCH   HttpMethod = "PATCH"
	POST    HttpMethod = "POST"
	PUT     HttpMethod = "PUT"
)

// Defines values for TaskStatus.
const (
	Done      TaskStatus = "done"
	Error     TaskStatus = "error"
	InProcess TaskStatus = "in_process"
	New       TaskStatus = "new"
)

// HttpMethod defines model for HttpMethod.
type HttpMethod string

// TaskRequest defines model for TaskRequest.
type TaskRequest struct {
	// Body Request body payload
	Body *map[string]interface{} `json:"body,omitempty"`

	// Headers Headers for the HTTP request
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  HttpMethod              `json:"method"`

	// Url URL of the 3rd-party service
	Url string `json:"url"`
}

// TaskStatus defines model for TaskStatus.
type TaskStatus string

// PostTaskJSONRequestBody defines body for PostTask for application/json ContentType.
type PostTaskJSONRequestBody = TaskRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new task for HTTP request to 3rd-party service
	// (POST /task)
	PostTask(ctx echo.Context) error
	// Get the status of a task
	// (GET /task/{id})
	GetTaskId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostTask converts echo context to params.
func (w *ServerInterfaceWrapper) PostTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTask(ctx)
	return err
}

// GetTaskId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTaskId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTaskId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/task", wrapper.PostTask)
	router.GET(baseURL+"/task/:id", wrapper.GetTaskId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUwU7jSBD9lVbtHr0ku9x8Y0OURMNMIhJOCI0adyVpiLub6jIoQv73UbVNCNgIMZpL",
	"HLvt9+q9elXPUPgyeIeOI+TPEIstljr9nTKH78hbb+QOXVVCfg2T8QoyWMyX6XIlv+fji/FqLLdnq9EU",
	"MpiOz84hg/liNZv/WMJNBrwPCDlEJus2UGew0vH+Eh8qjCzogXxAYouJ+dabvVwNxoJsYOsd5NC+ruRU",
	"Bb3feW3gAO1v77Bggd6iNkixCzBtDtTak+ItqulqtVDUFtEDVB7E/024hhz+GryaNWidGhzZVGdQ0a5L",
	"fHV5ofw6cZ6S+Sdo4r2KSI+2QMhg7anUDDlUZKHjVZ2B1GgJjfjfFtUw3fRULc4uWXMVj9tmvBMq634G",
	"8gXGCBkgkSfIwOFTT4+E2Lq1FxS2vJOz5NgS6REpufiqZtmoEdhHpNjo/vdkeDKUmnxAp4OFHE7TowyC",
	"5m0qcMA63qcI+CYKEgQtxs0M5LDwkUURNC5g5P/bcBTeMbr0iQ5hZ4v00eAuCvVLkD9r3nEM67dWM1WY",
	"HsTgXWyC+d9w+CXqt7G2phuNCTqRi0ZVzj5UqGbnh3xyo7ubh3c9l0dvUeff0nuxKktNe8hhRKgZlVYO",
	"nxJuIjkeAMW+J5yCkjo0eLamlvI32NOlCaYmzUzqLOkSOU3gdWcSDiLbeWg1WjmUTEgcdSnqrIH37ciO",
	"rH3vys0fbdWnO0QT6b1aky+7rqmXQnq3E3NoxnPkDfYQSE9iekEV3uCHi6OHxTrGDZLQ9GXtI/M7y3mH",
	"bsPbLsCoMVM154LyxariYS99NpTtBvu9tE+Qk77WRr9WutFa13X9KwAA//+Aqy/Y8gYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
