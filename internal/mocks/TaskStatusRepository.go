// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "RequestTasker/internal/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskStatusRepositoryMock is an autogenerated mock type for the TaskStatusRepository type
type TaskStatusRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, taskStatus
func (_m *TaskStatusRepositoryMock) Create(ctx context.Context, taskStatus entities.TaskStatus) (*entities.TaskStatus, error) {
	ret := _m.Called(ctx, taskStatus)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.TaskStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.TaskStatus) (*entities.TaskStatus, error)); ok {
		return rf(ctx, taskStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.TaskStatus) *entities.TaskStatus); ok {
		r0 = rf(ctx, taskStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TaskStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.TaskStatus) error); ok {
		r1 = rf(ctx, taskStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestByTaskID provides a mock function with given fields: ctx, taskID
func (_m *TaskStatusRepositoryMock) GetLatestByTaskID(ctx context.Context, taskID int64) (*entities.TaskStatus, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByTaskID")
	}

	var r0 *entities.TaskStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.TaskStatus, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.TaskStatus); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TaskStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskStatusRepositoryMock creates a new instance of TaskStatusRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskStatusRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskStatusRepositoryMock {
	mock := &TaskStatusRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
