// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "RequestTasker/internal/domian/entities"

	mock "github.com/stretchr/testify/mock"
)

// TaskStatusRepositoryMock is an autogenerated mock type for the TaskStatusRepository type
type TaskStatusRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *TaskStatusRepositoryMock) Create(_a0 entities.TaskStatus) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.TaskStatus) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByTaskID provides a mock function with given fields: taskID
func (_m *TaskStatusRepositoryMock) GetByTaskID(taskID int64) (entities.TaskStatus, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 entities.TaskStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (entities.TaskStatus, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(int64) entities.TaskStatus); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Get(0).(entities.TaskStatus)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskStatusRepositoryMock creates a new instance of TaskStatusRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskStatusRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskStatusRepositoryMock {
	mock := &TaskStatusRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
