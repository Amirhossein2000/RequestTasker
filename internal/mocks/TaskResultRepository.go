// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "RequestTasker/internal/domain/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskResultRepositoryMock is an autogenerated mock type for the TaskResultRepository type
type TaskResultRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, taskResult
func (_m *TaskResultRepositoryMock) Create(ctx context.Context, taskResult entities.TaskResult) (*entities.TaskResult, error) {
	ret := _m.Called(ctx, taskResult)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.TaskResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.TaskResult) (*entities.TaskResult, error)); ok {
		return rf(ctx, taskResult)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.TaskResult) *entities.TaskResult); ok {
		r0 = rf(ctx, taskResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TaskResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.TaskResult) error); ok {
		r1 = rf(ctx, taskResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTaskID provides a mock function with given fields: ctx, taskID
func (_m *TaskResultRepositoryMock) GetByTaskID(ctx context.Context, taskID int64) (*entities.TaskResult, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTaskID")
	}

	var r0 *entities.TaskResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.TaskResult, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.TaskResult); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TaskResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskResultRepositoryMock creates a new instance of TaskResultRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskResultRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskResultRepositoryMock {
	mock := &TaskResultRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
