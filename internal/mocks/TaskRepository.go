// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entities "RequestTaster/internal/domian/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TaskRepositoryMock is an autogenerated mock type for the TaskRepository type
type TaskRepositoryMock struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *TaskRepositoryMock) Create(_a0 entities.Task) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Task) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByPublicID provides a mock function with given fields: publicId
func (_m *TaskRepositoryMock) GetByPublicID(publicId uuid.UUID) (entities.Task, error) {
	ret := _m.Called(publicId)

	if len(ret) == 0 {
		panic("no return value specified for GetByPublicID")
	}

	var r0 entities.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (entities.Task, error)); ok {
		return rf(publicId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) entities.Task); ok {
		r0 = rf(publicId)
	} else {
		r0 = ret.Get(0).(entities.Task)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(publicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepositoryMock creates a new instance of TaskRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepositoryMock {
	mock := &TaskRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
